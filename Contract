// SPDX-License-Identifier:MIT
pragma solidity ^0.8.8;

contract SimpleStorage{

    // this gets initialized to zero
    uint256 favouriteNumber;

    mapping(string=>uint256)public nameToFavouriteNumber;

    struct People{
        uint256 favouriteNumber;
        string name;
    }
    // uint256[] public favouriteNumbersList;
    People[] public people;

    function store (uint256 _favouriteNumber) public{
        favouriteNumber = _favouriteNumber;
    }


// view and pure fucntions dont spend gas
    function retreive() public view returns (uint256){
        return favouriteNumber; 
    }

    //calldata, memory, storage
    function addPerson(string memory _name, uint256 _favouriteNumber) public {
        People memory newPerson = People({favouriteNumber:_favouriteNumber, name:_name});
        people.push(newPerson);
        nameToFavouriteNumber [_name] = _favouriteNumber;
    } 
}
